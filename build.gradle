plugins {
    id 'base'
    id 'de.dfki.mary.voicebuilding.marytts-kaldi-mfa' version '0.4.1'
    id 'org.m2ci.msp.flaml' version '0.4.0'
}

group 'de.dfki.mary'
version '0.2.0-SNAPSHOT'
description 'Upper Sorbian voice data for MaryTTS'

repositories {
    exclusiveContent {
        forRepository {
            ivy {
                url 'https://digital.serbski-institut.de/marytts'
                patternLayout {
                    artifact '[module](_[revision]).[ext]'
                }
                metadataSources {
                    artifact()
                }
            }
        }
        filter {
            includeGroup 'de.serbski-institut'
        }
    }
}

configurations {
    data
}

dependencies {
    data group: 'de.serbski-institut', name: 'hsb_audio_data', version: '20231220', ext: 'zip'
    marytts group: 'de.dfki.mary', name: 'marytts-lang-hsb', version: '0.2.0'
}

def unpackDataTask = tasks.register('unpackData') {
    ext.textDir = objects.directoryProperty()
            .convention(layout.buildDirectory.dir('text'))
    ext.wavDir = objects.directoryProperty()
            .convention(layout.buildDirectory.dir('wav'))
    outputs.dir textDir
    outputs.dir wavDir

    doLast {
        copy {
            into temporaryDir
            from configurations.data
            filesMatching '*.zip', { zipDetails ->
                copy {
                    into textDir
                    from zipTree(zipDetails.file)
                    include '**/text/*.txt'
                    eachFile { it.path = it.name }
                    includeEmptyDirs = false
                }
                copy {
                    into wavDir
                    from zipTree(zipDetails.file)
                    include '**/wav/*.wav'
                    eachFile { it.path = it.name }
                    includeEmptyDirs = false
                }
            }
        }
    }
}

convertTextToMaryXml {
    locale.set Locale.forLanguageTag('hsb')
    srcDir.set unpackDataTask.get().textDir
}

prepareForcedAlignment {
    wavDir.set unpackDataTask.get().wavDir
}

generateComments {
    properties = [
            Description: project.description,
            Contact    : 'https://github.com/marytts/serbski-institut-hsb-data',
            License    : 'https://creativecommons.org/licenses/by-nc-sa/4.0/'
    ]
}

generateFlac {
    srcFiles = unpackDataTask.get().wavDir.asFileTree
}

generateYaml {
    yamlFile.set file("${project.name}.yaml")
}

injectText {
    yamlSrcFile.set generateYaml.yamlFile
    textDir.set unpackDataTask.get().textDir
    yamlDestFile.set file("${project.name}_text.yaml")
}

injectSegments {
    yamlSrcFile.set injectText.yamlDestFile
    labDir.set tasks.named('convertTextGridToXLab').get().destDir
}

artifacts {
    'default' tasks.named('generateFlac').get().flacFile,
            tasks.named('injectSegments').get().yamlDestFile
}
